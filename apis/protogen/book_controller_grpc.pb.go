// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: apis/protogen/book_controller.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookController_CreateBook_FullMethodName = "/protogen.BookController/CreateBook"
	BookController_UpdateBook_FullMethodName = "/protogen.BookController/UpdateBook"
	BookController_DeleteBook_FullMethodName = "/protogen.BookController/DeleteBook"
	BookController_GetBook_FullMethodName    = "/protogen.BookController/GetBook"
	BookController_QueryBooks_FullMethodName = "/protogen.BookController/QueryBooks"
)

// BookControllerClient is the client API for BookController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookControllerClient interface {
	CreateBook(ctx context.Context, in *BookCreateInput, opts ...grpc.CallOption) (*BookInfo, error)
	UpdateBook(ctx context.Context, in *BookUpdateInput, opts ...grpc.CallOption) (*BookInfo, error)
	DeleteBook(ctx context.Context, in *BookDeleteInput, opts ...grpc.CallOption) (*BookDeleteResponse, error)
	GetBook(ctx context.Context, in *BookGetInput, opts ...grpc.CallOption) (*BookInfo, error)
	QueryBooks(ctx context.Context, in *BookQueryInput, opts ...grpc.CallOption) (*BookInfoListResponse, error)
}

type bookControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookControllerClient(cc grpc.ClientConnInterface) BookControllerClient {
	return &bookControllerClient{cc}
}

func (c *bookControllerClient) CreateBook(ctx context.Context, in *BookCreateInput, opts ...grpc.CallOption) (*BookInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookInfo)
	err := c.cc.Invoke(ctx, BookController_CreateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookControllerClient) UpdateBook(ctx context.Context, in *BookUpdateInput, opts ...grpc.CallOption) (*BookInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookInfo)
	err := c.cc.Invoke(ctx, BookController_UpdateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookControllerClient) DeleteBook(ctx context.Context, in *BookDeleteInput, opts ...grpc.CallOption) (*BookDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookDeleteResponse)
	err := c.cc.Invoke(ctx, BookController_DeleteBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookControllerClient) GetBook(ctx context.Context, in *BookGetInput, opts ...grpc.CallOption) (*BookInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookInfo)
	err := c.cc.Invoke(ctx, BookController_GetBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookControllerClient) QueryBooks(ctx context.Context, in *BookQueryInput, opts ...grpc.CallOption) (*BookInfoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookInfoListResponse)
	err := c.cc.Invoke(ctx, BookController_QueryBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookControllerServer is the server API for BookController service.
// All implementations must embed UnimplementedBookControllerServer
// for forward compatibility.
type BookControllerServer interface {
	CreateBook(context.Context, *BookCreateInput) (*BookInfo, error)
	UpdateBook(context.Context, *BookUpdateInput) (*BookInfo, error)
	DeleteBook(context.Context, *BookDeleteInput) (*BookDeleteResponse, error)
	GetBook(context.Context, *BookGetInput) (*BookInfo, error)
	QueryBooks(context.Context, *BookQueryInput) (*BookInfoListResponse, error)
	mustEmbedUnimplementedBookControllerServer()
}

// UnimplementedBookControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookControllerServer struct{}

func (UnimplementedBookControllerServer) CreateBook(context.Context, *BookCreateInput) (*BookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookControllerServer) UpdateBook(context.Context, *BookUpdateInput) (*BookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookControllerServer) DeleteBook(context.Context, *BookDeleteInput) (*BookDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookControllerServer) GetBook(context.Context, *BookGetInput) (*BookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookControllerServer) QueryBooks(context.Context, *BookQueryInput) (*BookInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBooks not implemented")
}
func (UnimplementedBookControllerServer) mustEmbedUnimplementedBookControllerServer() {}
func (UnimplementedBookControllerServer) testEmbeddedByValue()                        {}

// UnsafeBookControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookControllerServer will
// result in compilation errors.
type UnsafeBookControllerServer interface {
	mustEmbedUnimplementedBookControllerServer()
}

func RegisterBookControllerServer(s grpc.ServiceRegistrar, srv BookControllerServer) {
	// If the following call pancis, it indicates UnimplementedBookControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookController_ServiceDesc, srv)
}

func _BookController_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookControllerServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookController_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookControllerServer).CreateBook(ctx, req.(*BookCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookController_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookControllerServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookController_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookControllerServer).UpdateBook(ctx, req.(*BookUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookController_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookControllerServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookController_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookControllerServer).DeleteBook(ctx, req.(*BookDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookController_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookControllerServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookController_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookControllerServer).GetBook(ctx, req.(*BookGetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookController_QueryBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookControllerServer).QueryBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookController_QueryBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookControllerServer).QueryBooks(ctx, req.(*BookQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

// BookController_ServiceDesc is the grpc.ServiceDesc for BookController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protogen.BookController",
	HandlerType: (*BookControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookController_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookController_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookController_DeleteBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookController_GetBook_Handler,
		},
		{
			MethodName: "QueryBooks",
			Handler:    _BookController_QueryBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/protogen/book_controller.proto",
}
